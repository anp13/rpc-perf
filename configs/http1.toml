# An example configuration for benchmarking memcached with an 80/20 read/write
# mix in a keyspace of 1M keys using 32B keys and 128B values.

[general]
# specify the protocol to be used
protocol = "http1"
# the interval for stats integration and reporting
interval = 1
# the number of intervals to run the test for
duration = 300
# output is reported using the logging format on stdout. `json` output can also
# be used here
output_format = "log"
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# specify one or more endpoints as IP:PORT pairs
endpoints = [
	"192.168.0.101:80",
]

[client]
# number of threads used to drive client requests
threads = 4
# the total number of connections to each endpoint
poolsize = 20
# the connect timeout in milliseconds
connect_timeout = 10000
# set a global ratelimit for requests
request_ratelimit = 10_000
# set the timeout in milliseconds
request_timeout = 1000

[workload]
# the number of threads that will be used to generate requests
threads = 1

# [[workload.keyspace]]
# # sets the relative weight of this keyspace: defaults to 1
# weight = 1
# # controls what commands will be used in this keyspace
# commands = [
# 	# get /
# 	{ verb = "get", weight = 80 },
# ]

[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# set the key length
klen = 32
# set the number of keys
nkeys = 100
# controls what commands will be used in this keyspace
commands = [
	# get /[key]
	{ verb = "get", weight = 80 },
]

[tls]

