[general]
# specify the protocol to be used
protocol = "momento"
# the interval for stats integration and reporting
interval = 1
# the number of intervals to run the test for
duration = 300
# controls the number of worker threads to launch, each worker thread maintains
# its own event loop and connection pool to each endpoint
threads = 4
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# we don't need to specify any endpoints for momento
endpoints = []
# specify the name of the target cache
cache_name = "preview-cache"

[connection]
# the number of connections to each endpoint from each thread, the total number
# of connections to each endpoint is: poolsize * threads
poolsize = 20
# the connect timeout in milliseconds
timeout = 10000

[request]
# number of threads used to drive requests
threads = 4
# set a global ratelimit for requests
ratelimit = 100
# set the timeout in milliseconds
timeout = 1000

[workload]
# the number of threads that will be used to generate requests
threads = 1

[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 32
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the value length, in bytes
vlen = 128
# use random bytes for the values
vkind = "bytes"
# controls what commands will be used in this keyspace
commands = [
	# get
	{ verb = "get", weight = 80 },
	# set
	{ verb = "set", weight = 20 },
	# delete
	{ verb = "delete", weight = 0 },
]

[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 24
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# sets the value types to integers so we can mix increment with set
vkind = "i64"
# controls what commands will be used in this keyspace
commands = [
	# request a field from a discrionary
	{ verb = "dictionary_get", weight = 30 },
	# set cardinality > 1 to get multiple fields
	{ verb = "dictionary_get", weight = 10, cardinality = 5 },

	# increment the values for a field in the dictionary
	{ verb = "dictionary_increment", weight = 10 },

	# retrieve an entire dictionary
	{ verb = "dictionary_fetch", weight = 5 },

	# delete a field from a dictionary
	{ verb = "dictionary_delete", weight = 10 },
	# set cardinality > 1 to remove multiple fields
	{ verb = "dictionary_delete", weight = 5, cardinality = 5 },

	# set a field in the dictionary
	{ verb = "dictionary_set", weight = 20 },
	# set cardinality > 1 to set multiple fields
	{ verb = "dictionary_set", weight = 10, cardinality = 5 },
]

[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 16
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# sorted_set_get_rank
	{ verb = "sorted_set_rank", weight = 40 },
	# sorted_set_get_score
	{ verb = "sorted_set_score", weight = 10 },
	# sorted_set_increment
	{ verb = "sorted_set_increment", weight = 40 },
	# sorted_set_put
	{ verb = "sorted_set_add", weight = 5 },
	# sorted_set_remove
	{ verb = "sorted_set_remove", weight = 5},
]
